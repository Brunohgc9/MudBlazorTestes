@page "/"
@using System.Net.Http.Json
@using MudBlazorTeste2.Components.Components
@inject HttpClient httpClient
@inject IDialogService DialogService


<MudDrawer @bind-Open="@_open" Width="@_width" Height="@_height" Anchor="@_anchor" Elevation="1" Variant="@DrawerVariant.Temporary">
    <MudDrawerHeader>
        <MudText Typo="Typo.h6">My App</MudText>
    </MudDrawerHeader>
    <MudNavMenu>
        <MudNavLink Match="NavLinkMatch.All">Store</MudNavLink>
        <MudNavLink Match="NavLinkMatch.All">Library</MudNavLink>
        <MudNavLink Match="NavLinkMatch.All">Community</MudNavLink>
    </MudNavMenu>
</MudDrawer>

<MudContainer Fixed="true" MaxWidth="MaxWidth.ExtraExtraLarge">
    <MudDataGrid Items="Pizzas" Filterable="true" SortMode="@SortMode.Multiple" Hover="true" ApplyDropClassesOnDragStarted="true" DragDropColumnReordering="true">
        <ToolBarContent> @* Local onde Colocamos titulos, searchbar, buttons, etc. *@
            <MudText Typo="Typo.h3">Pizzas</MudText>
            <MudSpacer/>
            <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined">
                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Color="Color.Success">Adicionar</MudButton>
                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error">Delete</MudButton>
                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.ControlPointDuplicate" Color="Color.Tertiary">Duplicar</MudButton>
                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Search" Color="Color.Info">Procurar</MudButton>
            </MudButtonGroup>
        </ToolBarContent>
        <Columns>
            <SelectColumn DragAndDropEnabled="true" Hideable="true" T="Pizza" />
            <PropertyColumn Property="x => x.Cliente" Title="Pedido"/>
            <PropertyColumn Property="x => x.Sabor" Title="Sabor" />
            <PropertyColumn Property="x => x.Valor" Title="A ser Pago" />
            <PropertyColumn Property="x => x.TaxaDeEntrega" Title="Taxa de Entrega" />
            <TemplateColumn>
                <CellTemplate>
                    <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined">
                        <MudButton ClickPropagation="false">Ações</MudButton>
                        <MudMenu Icon="@Icons.Material.Filled.ArrowDropDown" Style="align-self: auto;">
                            <MudMenuItem OnClick="@(() => OpenDrawer(Anchor.End, 1))">
                                <MudText Color="Color.Success">Editar</MudText>
                            </MudMenuItem>
                            <MudMenuItem OnClick="@(() => OpenDrawer(Anchor.End, 2))">
                                <MudText Color="Color.Warning">Duplicar</MudText>
                            </MudMenuItem>
                            <MudMenuItem OnClick="@(() => OpenDrawer(Anchor.End, 3))">
                                <MudText Color="Color.Error">Deletar</MudText>
                            </MudMenuItem>
                        </MudMenu>
                    </MudButtonGroup>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
    </MudDataGrid>
</MudContainer>



@code{
    public record Pizza(string Cliente ,string Sabor, decimal Valor, decimal TaxaDeEntrega);
    public List<Pizza> Pizzas = new();
    protected override Task OnInitializedAsync()
    {
        Pizzas = new List<Pizza> 
        {
            new Pizza("Antônio", "Frango com Catupiry", 25.5m, 3.7m),
            new Pizza("Priscila", "Á Moda", 40.7m, 1m),
            new Pizza("Marcos", "Milho e Bacon", 20m, 8m),
            new Pizza("Angélica", "Portuguesa", 30m, 2.7m),
            new Pizza("Mônica", "Lombo Canadense", 55.99m, 15m)
        };
        return base.OnInitializedAsync();
    }
    private bool _open;
    private Anchor _anchor;
    private string _width, _height;

    private void OpenDrawer(Anchor anchor, int type)
    {
        _open = true;
        _anchor = anchor;

        switch (anchor)
        {
            case Anchor.End when type == 1:
                _width = "400px";
                _height = "100%";
                //inserir logica de mostrar os campos de adicionar na sidebar
                break;
            case Anchor.End when type == 2:
                _open = false;
                DuplicateAsync();
                break;
            case Anchor.End when type == 3:
                _open = false;
                DeleteAsync();
                break;


        }
    }

    private Task DeleteAsync()
    {
        var parameters = new DialogParameters<Dialog>
        {
            { x => x.ContentText, "Do you really want to delete these records? This process cannot be undone." },
            { x => x.ButtonText, "Delete" },
            { x => x.Color, Color.Error }
        };

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        return DialogService.ShowAsync<Dialog>("Delete", parameters, options);
    }

    private Task DuplicateAsync()
    {
        var parameters = new DialogParameters<Dialog>
        {
            {x => x.ContentText, "Você realmente deseja duplicar o item?"},
            {x => x.ButtonText, "Duplicar"},
            {x => x.Color, Color.Warning}
        };

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        return DialogService.ShowAsync<Dialog>("Duplicar", parameters, options);
    }
}